name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install
        working-directory: terraform/dev

      - name: Run Unit Tests
        run: npm test -- --coverage
        working-directory: terraform/dev

      - name: Run Integration Tests
        run: npm run integration-test
        working-directory: terraform/dev

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: terraform/dev
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/8byte-app:latest

      - name: Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/8byte-app:latest
          format: table
          exit-code: '0'
          ignore-unfixed: true
          severity: CRITICAL

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Docker to EC2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=8byte-web-server-dev" --query "Reservations[0].Instances[0].InstanceId" --output text)
          echo "Deploying to instance: $INSTANCE_ID"
          aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].State.Name" --output text
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="docker pull ${{ secrets.DOCKER_USERNAME }}/8byte-app:latest && docker stop 8byte-app || true && docker rm 8byte-app || true && docker run -d -p 80:3000 --name 8byte-app ${{ secrets.DOCKER_USERNAME }}/8byte-app:latest" \
            --output text
        working-directory: terraform/dev


      - name: Verify Deployment
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=8byte-web-server-dev" --query "Reservations[0].Instances[0].InstanceId" --output text)
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          ALB_DNS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(DNSName, '8byte-alb-dev')].DNSName" --output text | head -n 1)
          if [ -z "$ALB_DNS" ]; then
            echo "Error: No ALB found with name containing '8byte-alb-dev'"
            exit 1
          fi
          echo "Instance IP: $INSTANCE_IP"
          echo "ALB DNS: $ALB_DNS"
          # Simple health check
          curl -s http://$INSTANCE_IP:80 | grep "Hey, Hi 8byte"
          if [ $? -eq 0 ]; then
            echo "Deployment verified: Content found"
          else
            echo "Deployment failed: Expected content not found"
            exit 1
          fi
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Output Deployment URL
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=8byte-web-server-dev" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Deployment URL: http://$INSTANCE_IP"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  notify-failures:
    if: failure()
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_ADDRESS }}
          password: ${{ secrets.EMAIL_APP_PASSWORD }}
          subject: 'CI/CD Pipeline Failure - 8byte Project'
          body: 'The CI/CD pipeline failed. Check details at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          to: ${{ secrets.EMAIL_ADDRESS }}
          from: GitHub Actions <noreply@github.com>